{"version":3,"sources":["pages/Staff/NewNotice/NewNotice.jsx"],"names":["getNoticeByDate","Staff","readNotice","NewNotice","state","listData","total","handleGetNotice","pageNum","a","length","date","Date","time","getFullYear","getMonth","getDate","result","console","log","data","forEach","value","push","admin","notice","setState","pageSize","handleRead","val","index","_id","code","status","message","msg","this","receptionNotice","setTimeout","window","location","reload","locale","emptyText","header","style","textIndent","itemLayout","size","pagination","onChange","page","dataSource","renderItem","item","Item","Meta","avatar","src","imgPath","title","description","name","position","color","createTime","content","className","float","type","disabled","onClick","Component"],"mappings":"8TAMOA,EAA4BC,IAA5BD,gBAAgBE,EAAYD,IAAZC,WACFC,E,4MACjBC,MAAM,CACFC,SAAS,GACTC,MAAM,G,EAEVC,gB,uCAAgB,WAAMC,GAAN,qBAAAC,EAAA,6DACLJ,EAAU,EAAKD,MAAfC,UACEK,OAAO,EACVC,EAAK,IAAIC,KACXC,EAJQ,UAIAF,EAAKG,cAJL,kBAIuBH,EAAKI,WAAa,EAJzC,kBAIgDJ,EAAKK,UAJrD,mBAKOhB,EAAgBQ,EAAQK,GAL/B,OAKNI,EALM,OAMZC,QAAQC,IAAIF,GACTA,EAAOG,OACNH,EAAOG,KAAKC,SAAQ,SAAAC,GAChBjB,EAASkB,KAAT,uCAAkBD,GAASA,EAAME,OAASF,EAAMG,YAEpD,EAAKC,SAAS,CACVrB,WACAC,MAAMW,EAAOU,YAbT,2C,wDAkBhBC,W,uCAAW,WAAOC,EAAIC,GAAX,iBAAArB,EAAA,6DACAJ,EAAU,EAAKD,MAAfC,SACPa,QAAQC,IAAIU,GAFL,SAGY3B,EAAW2B,EAAIE,KAH3B,OAIU,SADXd,EAHC,QAIGe,MACN3B,EAASyB,GAAOG,OAAO,IACvBC,YAAQ,2BAAO,WACf,EAAKR,SAAS,CACVrB,cAGJ6B,YAAQjB,EAAOkB,KAXZ,2C,+GAeX,WACIC,KAAK7B,gBAAgB,GACrB8B,aAAgB,SAAAjB,GACTA,GACCkB,YAAW,WACPC,OAAOC,SAASC,WAChB,U,oBAIhB,WAAU,IAAD,OACL,OACG,qCAGK,cAAC,IAAD,CACQC,OAAQ,CAACC,UAA6B,IAAnBP,KAAKhC,MAAME,MAAU,2BAAO,IAC/CsC,OAAQ,qBAAIC,MAAO,CAACC,WAAW,IAAvB,+BAAgCV,KAAKhC,MAAME,MAA3C,wBACRyC,WAAW,aACXC,KAAK,QACLC,WAAY,CACZC,SAAU,SAAAC,GACN,EAAK5C,gBAAgB4C,IAEzB7C,MAAM8B,KAAKhC,MAAME,MACjBqB,SAAU,GAElByB,WAAYhB,KAAKhC,MAAMC,SACvBgD,WAAY,SAACC,EAAKxB,GAAN,OACZ,eAAC,IAAKyB,KAAN,WAGA,cAAC,IAAKA,KAAKC,KAAX,CACAC,OAAQ,cAAC,IAAD,CAAQC,IAAKJ,EAAKK,UAC1BC,MAAON,EAAKM,MACZC,YAAa,eAAC,IAAD,WAAQP,EAAKQ,KAAMR,EAAKS,SAAS,sBAAMlB,MAAO,CAACmB,MAAM,SAApB,SAA+BV,EAAKW,kBAEjFX,EAAKY,QACN,yBAASC,UAAU,gBAAnB,SACI,cAAC,IAAD,CAAOtB,MAAO,CAACuB,MAAM,SAArB,SACA,eAAC,IAAD,CAAQC,KAAK,UAAUC,SAAUhB,EAAKrB,OAAO,EAAGsC,QAAS,kBAAI,EAAK3C,WAAW0B,EAAKxB,IAAlF,UAAyG,IAAdwB,EAAKrB,OAAW,SAAI,SAA/G,kBAVKqB,EAAKvB,QAlBnB,W,GAlD4ByC","file":"static/js/32.50369fb4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { List, Avatar, Button,Space} from 'antd';\r\nimport \"./NewNotice.scss\"\r\nimport {Staff} from \"../../../axios\";\r\nimport { message } from '../../../api';\r\nimport {receptionNotice} from \"../../../socket\";\r\nconst {getNoticeByDate,readNotice}=Staff;\r\nexport default class NewNotice extends Component {\r\n    state={\r\n        listData:[],\r\n        total:0\r\n    }\r\n    handleGetNotice=async pageNum=>{\r\n        const {listData}=this.state;\r\n        listData.length=0;\r\n        const date=new Date();\r\n        let time=`${date.getFullYear()}年-${date.getMonth() + 1 }月-${date.getDate()}日`;\r\n        const result=await getNoticeByDate(pageNum,time);\r\n        console.log(result);\r\n        if(result.data){\r\n            result.data.forEach(value=>{\r\n                listData.push({...value,...value.admin,...value.notice});\r\n            })\r\n            this.setState({\r\n                listData,\r\n                total:result.pageSize\r\n            })\r\n        }\r\n      \r\n    }\r\n    handleRead=async (val,index)=>{\r\n        const {listData}=this.state;\r\n        console.log(val);\r\n        const result=await readNotice(val._id);\r\n        if(result.code==='200'){\r\n            listData[index].status='1';\r\n            message(\"读取成功\",'success');\r\n            this.setState({\r\n                listData\r\n            })\r\n        }else{\r\n            message(result.msg);\r\n        }\r\n    }\r\n    //生命周期\r\n    componentDidMount(){\r\n        this.handleGetNotice(1);\r\n        receptionNotice(data=>{\r\n            if(data){\r\n                setTimeout(()=>{\r\n                    window.location.reload();\r\n                  },2000)\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n           <>\r\n                {}\r\n                {/* <Skeleton active> */}\r\n                <List\r\n                        locale={{emptyText:this.state.total===0?'暂无信息':''}}\r\n                        header={<h2 style={{textIndent:20}}>今日有{this.state.total}条消息</h2>}\r\n                        itemLayout=\"horizontal\"\r\n                        size=\"large\"\r\n                        pagination={{\r\n                        onChange: page => {\r\n                            this.handleGetNotice(page);\r\n                        },\r\n                        total:this.state.total,\r\n                        pageSize: 5,\r\n                }}\r\n                dataSource={this.state.listData}\r\n                renderItem={(item,index) => (\r\n                <List.Item\r\n                    key={item._id}\r\n                 >\r\n                <List.Item.Meta\r\n                avatar={<Avatar src={item.imgPath} />}\r\n                title={item.title}\r\n                description={<Space>{item.name}{item.position}<span style={{color:'black'}}>{item.createTime}</span></Space>}\r\n                />\r\n                {item.content}\r\n                <section className=\"btn-container\">\r\n                    <Space style={{float:'right'}}>\r\n                    <Button type=\"primary\" disabled={item.status>0} onClick={()=>this.handleRead(item,index)}>{item.status===0?'未':'已'}读</Button>\r\n                    </Space>\r\n                </section>\r\n            </List.Item>\r\n            )}\r\n        />,\r\n        {/* </Skeleton> */}\r\n           </>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}